{
  "name": "request-promise",
  "version": "0.2.4",
  "description": "Promise-based Wrapper for XHR using Request and Bluebird",
  "main": "./lib/rp.js",
  "scripts": {
    "test": "gulp validate"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tyabonil/request-promise"
  },
  "keywords": [
    "xhr",
    "promise",
    "request"
  ],
  "readmeFilename": "README.md",
  "author": {
    "name": "Ty Abonil"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.3",
    "lodash": "^2.4.1",
    "request": "^2.34"
  },
  "devDependencies": {
    "chalk": "^0.5.1",
    "gulp": "^3.8.8",
    "gulp-istanbul": "^0.3.1",
    "gulp-jshint": "^1.8.5",
    "gulp-mocha": "^1.1.1",
    "jshint-stylish": "^1.0.0",
    "rimraf": "^2.2.8",
    "run-sequence": "^1.0.1"
  },
  "readme": "# Request-Promise\n\n[![Dependency Status](https://david-dm.org/tyabonil/request-promise.svg)](https://david-dm.org/tyabonil/request-promise)\n\nA Promises/A XHR wrapper for Bluebird and Request\n\n[Bluebird](https://github.com/petkaantonov/bluebird) and\n[Request](https://github.com/mikeal/request) are pretty awesome, but I found\nmyself using the same design pattern.  This is a simple wrapper that takes in a\nrequest options object (or URI string), and returns a chainable promise.  By\ndefault, http response codes other than 2xx will cause the promise to\nbe rejected.  This can be over-ridden by setting `options.simple` to `false`.\n\nNote: As of version 0.1, `reject` now passes  an object containing the following:\n```js    \n    reject({\n      error: body,\n      options: c,\n      response: response,\n      statusCode: response.statusCode\n    });\n```\n\n## Installation\n\n`npm install request-promise`\n\n## Examples\n\n``` js\nvar rp = require('request-promise');\n\nrp('http://www.google.com')\n    .then(console.dir)\n    .catch(console.error);\n\n//'GET's and displays google.com\n\nvar options = {\n    uri : 'http://posttestserver.com/post.php',\n    method : 'POST'\n}; \n\nrp(options)\n    .then(console.dir)\n    .catch(console.error);\n\n//displays response from server after post\n\noptions.transform = function (data) { return data.length ;};\n\nrp(options)\n    .then(console.dir)\n    .catch(console.error);\n\n//transform is called just before promise is fulfilled\n//displays length of response from server after post\n\n\n// get full response after DELETE\noptions = {\n  method: 'DELETE',\n  uri: 'http://my-server/path/to/resource/1234',\n  resolveWithFullResponse: true\n};\nrp(options)\n  .then(function(response) {\n    console.log(\"DELETE succeeded with status %d\", response.statusCode);\n  })\n  .catch(console.error);\n```\n\n## Contributing\n\nTo set up your development environment:\n\n1. clone the repo to your desktop,\n2. in the shell `cd` to the main folder,\n3. hit `npm install`,\n4. hit `npm install gulp -g` if you haven't installed gulp globally yet, and\n5. run `gulp dev`. (Or run `node ./node_modules/.bin/gulp dev` if you don't want to install gulp globally.)\n\n`gulp dev` watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from `./coverage/lcov-report/index.html`.\n\nIf you want to debug a test you should use `gulp test-without-coverage` to run all tests without obscuring the code by the test coverage instrumentation.\n\n## MIT Licenced\n",
  "bugs": {
    "url": "https://github.com/tyabonil/request-promise/issues"
  },
  "homepage": "https://github.com/tyabonil/request-promise",
  "_id": "request-promise@0.2.4",
  "_shasum": "e23af5aaa6c7385dadb4fcefade409cfb903ea0a",
  "_from": "request-promise@",
  "_resolved": "https://registry.npmjs.org/request-promise/-/request-promise-0.2.4.tgz"
}
