{
  "author": {
    "name": "Jake Luer",
    "email": "jake@alogicalparadox.com"
  },
  "name": "electron",
  "description": "A simple command-line interface framework for node.js.",
  "keywords": [
    "cli",
    "command",
    "option",
    "parser",
    "argv"
  ],
  "homepage": "http://alogicalparadox.com/electron",
  "license": "MIT",
  "version": "0.2.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/logicalparadox/electron.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "drip": "0.3.x"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "chai-spies": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/logicalparadox/electron.png?branch=master)](http://travis-ci.org/logicalparadox/electron)\n\n# Electron \n\n> A simple command-line interface framework for [node.js](http://nodejs.org).\n\n#### Features\n\n- reimagined `process.argv` parsing utility\n- framework for single or multiple command programs\n- automatic `--help` command generation with multiple theming options\n- built in cli coloring \n- chainable api\n\n## Quick Start Guide\n\nThis \"Quick Start Guide\" and the full API reference can be found \non [electron's documentation website](http://alogicalparadox.com/electron).\n\n#### Installation\n\nThe `electron` package is available through [npm](http://npmjs.org). It is recommended\nthat you add it to your project's `package.json`.\n\n```bash\nnpm install electron\n```\n\n#### Parsing Arguments\n\nThe argument parsing utility can be used independently of the program\nframework. Just pass the `process.argv` from any node modules and your\nready to go.\n\nThe following command execution...\n\n```bash\n$ node cli.js build --minify --out saved.min.js\n```\n\nCould be captured as so...\n\n```javascript\nvar argv = require('electron').argv();\n\n// objects\nargv.commands;               // [ 'build' ]\nargv.modes;                  // [ 'minify' ]\nargv.params;                 // { out: 'saved.min.js' }\n\n// helpers\nargv.command('build');       // true\nargv.mode('m', 'minify');    // true\nargv.param('o', 'out');      // 'saved.min.js'\n```\n\nRecommend reading the \"Argument Parsing Utility\" section of the \n[documentation](http://alogicalpardox.com/electron)\nto learn about the methodologies and specifics of each of the helpers.\n\n#### Your First Program\n\nTo construct your first program, simply execute the electron export\nwith a parameter of the namespace you wish to use for your program.\nThen proceed to define your settings and commands.\n\n```javascript\nvar myApp = require('../lib/myapp')\n  , program = require('electron')('myapp');\n\n/**\n * Define your program settings\n */\n\nprogram\n  .name('My Cool App')\n  .desc('http://docs.mycoolapp.com')\n  .version(myApp.version);\n\n/**\n * Define your first command\n */\n\nprogram\n  .command('build')\n  .desc('start a build task')\n  .option('-m, --minify', 'flag to set enable minification')\n  .option('-o, --out [file.js]', 'name of output file')\n  .action(function (argv) {\n    var minify = argv.mode('m', 'minify')\n      , savefile = argv.param('o', 'out')\n      , cwd = argv.cwd;\n\n   program.colorize();\n   console.log('Welcome to myApp'.gray + myApp.version);\n   console.log('It works if it ends with '.gray + 'myApp ' + 'ok'.green);\n   // etc...\n  });\n\n/**\n * Parse argv and execute respective command\n */\n\nprogram.parse();\n```\n\nYour `-h, --help` and `-v, --version` will be generated for you automatically.\n\nRecommend reading the \"Program Framework\" and \"Constructing Commands\" sections\nof the [documentation](http://alogicalpardox.com/electron)\nto learn about all of the available chainable commands and theming options \navailable to construct your programs.\n\n## Tests\n\nTests are writting in [Mocha](http://github.com/visionmedia/mocha) using \nthe [Chai](http://chaijs.com) `should` BDD assertion library. To make sure you \nhave that installed, clone this repo, install dependacies using `npm install`.\n\n    $ npm test\n\n## Contributors\n\nInterested in contributing? Fork to get started. Contact [@logicalparadox](http://github.com/logicalparadox) \nif you are interested in being regular contributor.\n\n* Jake Luer ([@logicalparadox](http://github.com/logicalparadox))\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Jake Luer <jake@alogicalparadox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/logicalparadox/electron/issues"
  },
  "_id": "electron@0.2.1",
  "_shasum": "7562feddb1c388e1491e6633f6c599139bc7bc7b",
  "_from": "electron@0.2.x",
  "_resolved": "https://registry.npmjs.org/electron/-/electron-0.2.1.tgz"
}
