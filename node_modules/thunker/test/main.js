/* Test, spec describe thunker */

var fs = require('fs')
  , co = require('co')
  , should = require('should')
  , thunker = require('../lib/thunker');
  
var noop = function () {return true};

var tfs = thunker(fs); // Create Thunked API of fs module

describe('thunker(object)', function () {
  it('should return an object with required methods', function (done) {
    tfs.should.be.an.instanceof(Object);
    should.exist(tfs.unlink);
    should.exist(tfs.rename);
    done();
  });  
});

describe('thunked method', function () {
  it('should return a thunk', function (done) {
    var result = tfs.readFile();
    //result.should.have.type('function'); // assertion wont work
  
    result(__filename, function (err, data) {
      should.not.exist(err);
      should.exist(data);
    });
    done();
  });
  
  it(' fs.readFile should work with co like a native fs.readFile', function (done) {
    co(function* () {
      var data = yield tfs.readFile(__filename, {encoding: 'utf8'}); // Read file by thunked method
      // Read file by common async method
      fs.readFile(__filename, {encoding: 'utf8'}, function (err, fileData) {
        data.should.equal(fileData);
        done();
      });
    });
  });
});
