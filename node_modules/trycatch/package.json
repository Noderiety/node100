{
  "name": "trycatch",
  "version": "1.4.4",
  "description": "An asynchronous domain-based exception handler with long stack traces for node.js",
  "homepage": "http://github.com/CrabDude/trycatch",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrabDude/trycatch.git"
  },
  "bugs": {
    "url": "http://github.com/CrabDude/trycatch/issues"
  },
  "author": {
    "name": "Adam Crabtree",
    "email": "dude@noderiety.com",
    "url": "http://noderiety.com"
  },
  "main": "lib/trycatch",
  "directories": {
    "lib": "./lib/"
  },
  "engines": {
    "node": ">=0.8.14"
  },
  "engineStrict": true,
  "scripts": {
    "test": "jshint --config .jshintrc  `find . -path ./node_modules -prune -o -name '*.js' -print | tr '\n' ' '` && mocha --reporter spec ./test/*.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.html"
    }
  ],
  "dependencies": {
    "hookit": "~0.1.1",
    "chalk": "0.4.x"
  },
  "optionalDependencies": {
    "chalk": "0.4.x"
  },
  "keywords": [
    "error",
    "exception",
    "try",
    "catch",
    "stack",
    "trace"
  ],
  "devDependencies": {
    "mocha": "~1.4.0",
    "underscore": "~1.3.3",
    "lodash": "2.x.x",
    "jshint": "2.x.x"
  },
  "readme": "trycatch\n=======\n[![Build Status](https://travis-ci.org/CrabDude/trycatch.png)](https://travis-ci.org/CrabDude/trycatch)\nA domain-based asynchronous try/catch with (optional) long stack traces for node.js [optimized for V8](https://github.com/joyent/node/wiki/Best-practices-and-gotchas-with-v8).\n\nWARNING: trycatch replaces the built-in global Error object.\n\n#Install\n```\nnpm install trycatch\n```\n\n#Use\n```javascript\nvar trycatch = require('trycatch')\ntrycatch(function() {\n  // do something error-prone\n}, function(err) {\n  console.log(err.stack);\n})\n```\n\n\n###Returning 500s on Server Request\n\n```javascript\nhttp.createServer(function(req, res) {\n  trycatch(function() {\n    setTimeout(function() {\n      throw new Error('Baloney!');\n    }, 1000);\n  }, function(err) {\n    res.writeHead(500);\n    res.end(err.stack);\n  });\n}).listen(8000);\n```\n\nVisit http://localhost:8000 and get your 500.\n\n#Options\nOptional Long-Stack-Traces:\n```javascript\n// Because trycatch shims all native I/O calls,\n// it must be required & configured with 'long-stack-traces' before any other modules.\nvar trycatch = require('trycatch')\ntrycatch.configure({'long-stack-traces': true})\ntrycatch(fnTry, fnCatch)\n```\n\nColors:\n```javascript\nvar trycatch = require('trycatch')\ntrycatch.configure({\n  colors: {\n    // 'none' or falsy values will omit\n    'node': 'none',\n    'node_modules': false,\n    'default': 'yellow'\n  }\n})\ntrycatch(fnTry, fnCatch)\n```\n\nAdvanced Formatting:\n```javascript\nvar trycatch = require('trycatch')\ntrycatch.configure({\n  format: function(line) {\n    // Alter final output (falsy values will omit)\n    return line\n  }\n})\ntrycatch(fnTry, fnCatch)\n```\n\n#Basic Example\n```javascript\nvar trycatch = require(\"trycatch\"),\n  _ = require('underscore')._\n\n  trycatch(function() {\n  _.map(['Error 1', 'Error 2'], function foo(v) {\n    setTimeout(function() {\n      throw new Error(v)\n    }, 10)\n  })\n}, function(err) {\n  console.log(\"Async error caught!\\n\", err.stack);\n});\n``` \n\n#### Output\n\n![](https://raw.github.com/CrabDude/trycatch/master/screenshot.png)\n\n\nAdvanced Examples\n-------------\nSee the `/test` and `examples` directories for more use cases.\n",
  "readmeFilename": "README.md",
  "_id": "trycatch@1.4.4",
  "_from": "trycatch@^1.4.4"
}
