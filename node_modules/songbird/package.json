{
  "name": "songbird",
  "version": "1.0.1",
  "description": "Chain promises easily in node.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/duereg/songbird.git"
  },
  "keywords": [
    "bluebird",
    "promise",
    "async",
    "then",
    "prototype",
    "Object",
    "Function"
  ],
  "author": {
    "name": "Matt Blair",
    "email": "matt@mattblair.co",
    "url": "http://mattblair.co"
  },
  "licenses": [
    "MIT"
  ],
  "dependencies": {
    "bluebird": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "coffee-script": "*"
  },
  "main": "lib/songbird",
  "bin": {
    "songbird": "./bin/songbird"
  },
  "engine": {
    "node": ">=0.6"
  },
  "scripts": {
    "build": "coffee -o lib -c src/*.coffee",
    "pretest": "npm build",
    "test": "mocha --compilers coffee:coffee-script/register --reporter spec test/*.spec.coffee"
  },
  "readme": "﻿[![Build Status](https://travis-ci.org/duereg/songbird.svg)](https://travis-ci.org/duereg/songbird)\n[![Dependencies](https://david-dm.org/duereg/songbird.svg)](https://david-dm.org/duereg/songbird)\n[![devDependencies](https://david-dm.org/duereg/songbird/dev-status.svg)](https://david-dm.org/duereg/songbird#info=devDependencies&view=table)\n[![NPM version](https://badge.fury.io/js/songbird.svg)](http://badge.fury.io/js/songbird)\n\nSongbird\n=======\n\nEasily mix asynchronous and synchronous programming styles in node.js.\n\nMix promises into all the objects in your code base.\n\nSongbird is built upon the bluebird promise library (hence the name).\n\nIf you have any questions about what methods the promises expose, go [here](https://raw2.github.com/petkaantonov/bluebird/master/API.md) to view the bluebird API.\n\n*A project by [Matt Blair](http://mattblair.co) at https://github.com/duereg/songbird.*\n\nInstall\n-------\n\nSongbird requires node version 0.6.x or greater.\n\n```\nnpm install songbird\n```\n\n\nExamples\n-----\n\nWould you rather write this:\n\n```javascript\nvar updateUser = function(id, attributes, callback) {\n  User.findOne(id, function (err, user) {\n    if (err) return callback(err);\n\n    user.set(attributes);\n    user.save(function(err, updated) {\n      if (err) return callback(err);\n\n      console.log(\"Updated\", updated);\n      callback(null, updated);\n    });\n  });\n});\n```\n\nOr this, which behaves identically:\n\n```coffeescript\n\n  User.promise.findOne(id).then( (user) →\n    user.set(attributes)\n    user.promise.save()\n  ).then (user) -> console.log(\"Updated\", user)\n```\n\n### Without Songbird\n\nUsing standard node callback-style APIs without Songbird, we write\n(from [the fs docs](http://nodejs.org/docs/v0.6.14/api/fs.html#fs_fs_readfile_filename_encoding_callback)):\n\n```javascript\nfs.readFile('/etc/passwd', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n### Using the promise property\n\nUsing Songbird, we write:\n\n```javascript\nfs.promise.readFile('/etc/passwd').then(console.log);\n```\n\n### Console\n\nSongbird makes it much easier to work with asynchronous methods in an\ninteractive console, or REPL.\n\nIf you find yourself in an interactive session, you can require Songbird so that\nyou can use `promise`.\n\n```\n> fs = require('fs');\n> require('songbird');\n> fs.promise.readFile('/etc/passwd', 'utf8').then (data) → data.get()\n```\n\n```\n$ songbird\nStarting Songbird node REPL...\n> fs = require('fs');\n> fs.promise.readFile('/etc/passwd', 'utf8').then(console.log)\n##\n# User Database\n#\n...\n```\n\nOr for a CoffeeScript REPL:\n\n```\n$ songbird -c [or --coffee]\nStarting Songbird coffee REPL...\ncoffee> fs = require 'fs'\ncoffee> fs.promise.readFile('/etc/passwd', 'utf8').then console.log\n##\n# User Database\n#\n...\n```\n### Object & Function mixins\n\nSongbird mixes `promise` into `Function.prototype` so you can\nuse them directly as in:\n\n```javascript\nreadFile = require('fs').readFile;\nreadFile.promise('/etc/passwd').then(console.log);\n```\n\nSongbird adds `promise` to `Object.prototype` correctly so they\nare not enumerable.\n\nThese proxy methods also ignore all getters, even those that may\nreturn functions. If you need to call a getter with Songbird that returns an\nasynchronous function, you can do:\n\n```javascript\nfunc = obj.getter\nfunc.promise.call(obj, args)\n```\n\n### Handling Multiple Promises\n\nRequiring the songbird library not only updates the Object and Function prototype, but also returns a Promise library in which you can carry out certain actions that aren't easily handled from the the promise property.\n\nFor example: you have a situation where you're dealing with multiple promises, but don't care what order they complete in.\n\n```js\nPromise = require(\"songbird\");\n\nPromise.all([task1, task2, task3]).spread(function(result1, result2, result3){\n\n});\n```\n\nNormally when using `.then` the code would be like:\n\n```js\nPromise = require(\"songbird\");\n\nPromise.all([task1, task2, task3]).then(function(results){\n    var result1 = results[0];\n    var result2 = results[1];\n    var result3 = results[2];\n});\n```\n\nFor more information about the underlying bluebird promise API, the [API docs are here](https://raw2.github.com/petkaantonov/bluebird/master/API.md).\n\n### Disclaimer\n\nSome people don't like libraries that mix in to Object.prototype\nand Function.prototype. If that's how you feel, then Songbird is probably\nnot for you.\n\nContributing\n------------\n\n```\ngit clone git://github.com/duereg/songbird.git\nnpm install\nnpm test\n```\n\nSongbird is written in [coffeescript](http://coffeescript.org) with\nsource in `src/` compiled to `lib/`.\n\nTests are written with mocha and chai in `test/`.\n\nRun tests with `npm test` which will also compile the coffeescript to\n`lib/`.\n\nPull requests are welcome. Please provide tests for your changes and\nfeatures. Thanks!\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2014 Matt Blair\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/duereg/songbird/issues"
  },
  "homepage": "https://github.com/duereg/songbird",
  "_id": "songbird@1.0.1",
  "_shasum": "189542909f24586a3c5c1092774e827521774622",
  "_from": "songbird@^1.0.1",
  "_resolved": "https://registry.npmjs.org/songbird/-/songbird-1.0.1.tgz"
}
