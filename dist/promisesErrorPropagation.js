"use strict";
require('traceur-source-maps').install(require('traceur'));
var fs = require('fs'),
    q = require('q'),
    _ = require('lodash'),
    readFile = q.denodeify(fs.readFile);
function getTotalFileLength() {
  return q.all([readFile(__filename), readFile(__filename)]).then((function(datas) {
    return _.reduce(datas, (function(sum, num) {
      return sum + num.length;
    }), 0);
  }));
}
function main() {
  return getTotalFileLength().then((function(length) {
    if (length > 10)
      throw new Error('Those files are way too long');
    console.log('success');
  })).fail((function(err) {
    console.log(err.stack);
  }));
}
main().done();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb21pc2VzRXJyb3JQcm9wYWdhdGlvbi5lczYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFNLEFBQUMsQ0FBQyxxQkFBb0IsQ0FBQyxRQUFRLEFBQUMsQ0FBQyxPQUFNLEFBQUMsQ0FBQyxTQUFRLENBQUMsQ0FBQyxDQUFDO0VBQUssQ0FBQSxFQUFDLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxJQUFHLENBQUM7QUFDOUUsSUFBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsR0FBRSxDQUFDO0FBQ2YsSUFBQSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsUUFBTyxDQUFDO0FBQ3BCLFdBQU8sRUFBSSxDQUFBLENBQUEsVUFBVSxBQUFDLENBQUMsRUFBQyxTQUFTLENBQUM7QUFFcEMsT0FBUyxtQkFBaUIsQ0FBQyxBQUFDO0FBQzNCLE9BQU8sQ0FBQSxDQUFBLElBQUksQUFBQyxDQUFDLENBQ1osUUFBTyxBQUFDLENBQUMsVUFBUyxDQUFDLENBQ25CLENBQUEsUUFBTyxBQUFDLENBQUMsVUFBUyxDQUFDLENBQ3BCLENBQUMsS0FBSyxBQUFDLEVBQUMsU0FBQSxLQUFJO0FBQ1gsU0FBTyxDQUFBLENBQUEsT0FBTyxBQUFDLENBQUMsS0FBSSxHQUFHLFNBQUMsR0FBRSxDQUFHLENBQUEsR0FBRTtXQUFNLENBQUEsR0FBRSxFQUFJLENBQUEsR0FBRSxPQUFPO0lBQUEsRUFBRyxFQUFBLENBQUMsQ0FBQTtFQU16RCxFQUFDLENBQUE7QUFDRjtBQUVBLE9BQVMsS0FBRyxDQUFDLEFBQUM7QUFDYixPQUFPLENBQUEsa0JBQWlCLEFBQUMsRUFBQyxLQUNyQixBQUFDLEVBQUMsU0FBQSxNQUFLLENBQUs7QUFDZixPQUFJLE1BQUssRUFBSSxHQUFDO0FBQUcsVUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLDhCQUE2QixDQUFDLENBQUE7QUFBQSxBQUMvRCxVQUFNLElBQUksQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFBO0VBQ3RCLEVBQUMsS0FDRyxBQUFDLEVBQUMsU0FBQSxHQUFFLENBQUs7QUFDWixVQUFNLElBQUksQUFBQyxDQUFDLEdBQUUsTUFBTSxDQUFDLENBQUE7RUFDdEIsRUFBQyxDQUFBO0FBQ0g7QUFFQSxHQUFHLEFBQUMsRUFBQyxLQUFLLEFBQUMsRUFBQyxDQUFBO0FBQ1oiLCJmaWxlIjoicHJvbWlzZXNFcnJvclByb3BhZ2F0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgndHJhY2V1ci1zb3VyY2UtbWFwcycpLmluc3RhbGwocmVxdWlyZSgndHJhY2V1cicpKTtsZXQgZnMgPSByZXF1aXJlKCdmcycpLFxuXHRcdHEgPSByZXF1aXJlKCdxJyksXG5cdFx0XyA9IHJlcXVpcmUoJ2xvZGFzaCcpLFxuXHRcdHJlYWRGaWxlID0gcS5kZW5vZGVpZnkoZnMucmVhZEZpbGUpXG5cbmZ1bmN0aW9uIGdldFRvdGFsRmlsZUxlbmd0aCgpIHtcblx0cmV0dXJuIHEuYWxsKFtcblx0XHRyZWFkRmlsZShfX2ZpbGVuYW1lKSxcblx0XHRyZWFkRmlsZShfX2ZpbGVuYW1lKVxuXHRdKS50aGVuKGRhdGFzID0+IHtcblx0XHRyZXR1cm4gXy5yZWR1Y2UoZGF0YXMsIChzdW0sIG51bSkgPT4gc3VtICsgbnVtLmxlbmd0aCwgMClcblx0XHQvLyByZXR1cm4gM1xuXHRcdC8vIHJldHVybiBhc3luY0NhbGN1bGF0ZUxlbmd0aFByb21pc2UoZGF0YXMpXG5cdFx0Ly8gcmV0dXJuIHEoMylcblx0XHQvLyByZXR1cm4gcS5yZWplY3QobmV3IEVycm9yKCdmYWlsJykpXG5cdFx0Ly8gcmV0dXJuIHEuYWxsKFtwcm9taXNlQSwgcHJvbWlzZUIsIHByb21pc2VDXSlcblx0fSlcbn1cblxuZnVuY3Rpb24gbWFpbigpIHtcblx0cmV0dXJuIGdldFRvdGFsRmlsZUxlbmd0aCgpXG5cdFx0LnRoZW4obGVuZ3RoID0+IHtcblx0XHRcdGlmIChsZW5ndGggPiAxMCkgdGhyb3cgbmV3IEVycm9yKCdUaG9zZSBmaWxlcyBhcmUgd2F5IHRvbyBsb25nJylcblx0XHRcdGNvbnNvbGUubG9nKCdzdWNjZXNzJylcblx0XHR9KVxuXHRcdC5mYWlsKGVyciA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhlcnIuc3RhY2spXG5cdFx0fSlcbn1cblxubWFpbigpLmRvbmUoKVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9